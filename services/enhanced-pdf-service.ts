import jsPDF from "jspdf"
import { type AnalysisReport } from "./ai-analysis-service"

export class EnhancedPdfService {
  private pdf: jsPDF
  private pageWidth: number
  private pageHeight: number
  private margin: number
  private currentY: number
  private lineHeight: number

  constructor() {
    this.pdf = new jsPDF("p", "mm", "a4")
    this.pageWidth = 210 // A4 width in mm
    this.pageHeight = 297 // A4 height in mm
    this.margin = 20
    this.currentY = this.margin
    this.lineHeight = 7
  }

  private addHeader(title: string, subtitle?: string) {
    // Main title
    this.pdf.setFontSize(20)
    this.pdf.setFont("helvetica", "bold")
    this.pdf.text(title, this.margin, this.currentY)
    this.currentY += 12

    // Subtitle
    if (subtitle) {
      this.pdf.setFontSize(14)
      this.pdf.setFont("helvetica", "normal")
      this.pdf.text(subtitle, this.margin, this.currentY)
      this.currentY += 10
    }

    // Add a line
    this.pdf.setLineWidth(0.5)
    this.pdf.line(this.margin, this.currentY, this.pageWidth - this.margin, this.currentY)
    this.currentY += 8
  }

  private addSection(title: string, content: string | string[]) {
    // Check if we need a new page
    if (this.currentY > this.pageHeight - 40) {
      this.addPage()
    }

    // Section title
    this.pdf.setFontSize(14)
    this.pdf.setFont("helvetica", "bold")
    this.pdf.text(title, this.margin, this.currentY)
    this.currentY += 8

    // Content
    this.pdf.setFontSize(11)
    this.pdf.setFont("helvetica", "normal")

    if (Array.isArray(content)) {
      // Handle bullet points
      content.forEach((item) => {
        const lines = this.pdf.splitTextToSize(`â€¢ ${item}`, this.pageWidth - this.margin * 2)
        lines.forEach((line: string) => {
          if (this.currentY > this.pageHeight - this.margin) {
            this.addPage()
          }
          this.pdf.text(line, this.margin + 5, this.currentY)
          this.currentY += this.lineHeight
        })
      })
    } else {
      // Handle paragraph text - split by line breaks first
      const paragraphs = content.split('\n')
      paragraphs.forEach((paragraph) => {
        if (paragraph.trim()) {
          const lines = this.pdf.splitTextToSize(paragraph.trim(), this.pageWidth - this.margin * 2)
          lines.forEach((line: string) => {
            if (this.currentY > this.pageHeight - this.margin) {
              this.addPage()
            }
            this.pdf.text(line, this.margin, this.currentY)
            this.currentY += this.lineHeight
          })
          this.currentY += 3 // Extra space between paragraphs
        } else {
          this.currentY += this.lineHeight // Empty line
        }
      })
    }

    this.currentY += 5 // Extra space after section
  }

  private addMetricBox(label: string, value: string) {
    // Check if we need a new page
    if (this.currentY > this.pageHeight - 30) {
      this.addPage()
    }

    // Background box
    this.pdf.setFillColor(245, 245, 245)
    this.pdf.rect(this.margin, this.currentY - 3, this.pageWidth - this.margin * 2, 12, "F")

    // Label
    this.pdf.setFontSize(10)
    this.pdf.setFont("helvetica", "bold")
    this.pdf.text(label, this.margin + 5, this.currentY + 4)

    // Value
    this.pdf.setFont("helvetica", "normal")
    this.pdf.text(value, this.margin + 80, this.currentY + 4)

    this.currentY += 15
  }

  private addPage() {
    this.pdf.addPage()
    this.currentY = this.margin
  }

  private addFooter() {
    const pageCount = this.pdf.getNumberOfPages()
    for (let i = 1; i <= pageCount; i++) {
      this.pdf.setPage(i)
      this.pdf.setFontSize(8)
      this.pdf.setFont("helvetica", "normal")
      this.pdf.text(
        `Generated by APT Wisdom - Page ${i} of ${pageCount}`,
        this.margin,
        this.pageHeight - 10
      )
      this.pdf.text(
        new Date().toLocaleDateString(),
        this.pageWidth - this.margin - 30,
        this.pageHeight - 10
      )
    }
  }

  generateAnalysisReport(
    propertyAddress: string,
    report: AnalysisReport,
    propertyData: any
  ): jsPDF {
    // Header
    this.addHeader("Property Investment Analysis Report", propertyAddress)

    // Executive Summary
    this.addSection("Executive Summary", report.summary)

    // Key Metrics
    this.addSection("Key Financial Metrics", "")
    this.addMetricBox("Recommended Offer Price", `$${report.recommendedOfferPrice.toLocaleString()}`)
    this.addMetricBox("Cap Rate (Asking)", `${propertyData.capRateAskingPrice?.toFixed(2)}%`)
    this.addMetricBox("Cap Rate (Offer)", `${propertyData.capRateOfferPrice?.toFixed(2)}%`)
    this.addMetricBox("Net Operating Income", `$${propertyData.netOperatingIncome?.toLocaleString()}`)
    this.addMetricBox("Total Units", propertyData.numUnits?.toString() || "N/A")
    this.addMetricBox("Monthly Income", `$${propertyData.monthlyIncome?.toLocaleString()}`)

    // Analysis Sections
    this.addSection("Property Strengths", report.strengths)
    this.addSection("Areas of Concern", report.weaknesses)
    this.addSection("Investment Opportunities", report.opportunities)
    this.addSection("Risk Factors", report.threats)

    // Detailed Analysis
    this.addSection("Cap Rate Analysis", report.capRateAnalysis)
    this.addSection("Cash Flow Analysis", report.cashFlowAnalysis)
    this.addSection("Return on Investment", report.returnOnInvestment)
    this.addSection("Offer Price Rationale", report.recommendedOfferPriceRationale)

    // Recommendations
    this.addSection("Investment Recommendations", report.recommendations)

    // Footer
    this.addFooter()

    return this.pdf
  }

  generateOfferLetter(
    propertyAddress: string,
    offerLetter: string,
    buyerInfo: { name: string; company: string; contact: string }
  ): jsPDF {
    // Header
    this.addHeader("Property Acquisition Offer Letter", propertyAddress)

    // Buyer Information
    this.addSection("From:", "")
    this.addMetricBox("Name", buyerInfo.name)
    this.addMetricBox("Company", buyerInfo.company)
    this.addMetricBox("Contact", buyerInfo.contact)

    this.currentY += 10

    // Letter Content
    this.addSection("Offer Letter", offerLetter)

    // Footer
    this.addFooter()

    return this.pdf
  }

  save(filename: string) {
    this.pdf.save(filename)
  }
}

export const PdfService = {
  generateAnalysisReport: (
    propertyAddress: string,
    report: AnalysisReport,
    propertyData: any
  ): void => {
    const service = new EnhancedPdfService()
    const pdf = service.generateAnalysisReport(propertyAddress, report, propertyData)
    service.save(`property-analysis-${propertyAddress.replace(/[^a-z0-9]/gi, "-").toLowerCase()}.pdf`)
  },

  generateOfferLetter: (
    propertyAddress: string,
    offerLetter: string,
    buyerInfo: { name: string; company: string; contact: string }
  ): void => {
    const service = new EnhancedPdfService()
    const pdf = service.generateOfferLetter(propertyAddress, offerLetter, buyerInfo)
    service.save(`offer-letter-${propertyAddress.replace(/[^a-z0-9]/gi, "-").toLowerCase()}.pdf`)
  },
}
